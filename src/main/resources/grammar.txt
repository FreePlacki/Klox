program        -> declaration* EOF ;

declaration    -> varDecl | funDecl | statement ;

varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;

funDecl        -> "fun" function

function       -> IDENTIFIER "(" parameters? ")" block ;

parameters     -> IDENTIFIER ("," IDENTIFIER )* ;

statement      -> exprStmt
                | ifStmt
                | whileStmt
                | forStmt
                | printStmt
                | returnStmt
                | block;

exprStmt       -> expression ";" ;

ifStmt         -> "if" "(" expression ")" statement
                  ( "else" statement )? ;

whileStmt      -> "while" "(" expression ")" statement ;

forStmt        -> "for" "(" varDecl | exprStmt ";"
                            expression? ";"
                            expression?
                        ")" statement ;

printStmt      -> "print" expression ";" ;

returnStmt     -> "return" expression? ";" ;

block          -> "{" declaration* "}" ;

expression     -> assignment ;

assignment     -> IDENTIFIER "=" assignment | ternary ;

ternary        -> logicOr | ( "?" expression ":" ternary ) ;

logicOr        -> logicAnd ( "or" logicAnd )* ;

logicAnd       -> equality ( "and" equality )* ;

equality       -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term           -> factor ( ( "-" | "+" ) factor )* ;

factor         -> unary ( ( "/" | "*" ) unary )* ;

unary          -> ( "!" | "-" ) unary
               | call ;

call           -> primary ( arguments? )* ;

arguments      -> expression ( "," expression )* ;

primary        -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER ;
               